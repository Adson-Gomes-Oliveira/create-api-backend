'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filesystem = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const recursive_readdir_1 = __importDefault(require("recursive-readdir"));
const helper_1 = require("./helper");
const goodies_1 = require("@supercharge/goodies");
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
const fs_extra_1 = __importDefault(require("fs-extra"));
class Filesystem {
    /**
     * Retrieve information about the given file. Use `access`
     * to check whether the `file` exists instead of `stat`.
     *
     * @param {String} file
     *
     * @returns {Stats}
     */
    static async stat(file) {
        return await fs_extra_1.default.stat(file);
    }
    /**
     * Returns the file size in bytes of the file located at `path`.
     *
     * @param {String} path
     *
     * @returns {Integer}
     */
    static async size(path) {
        return goodies_1.upon(await this.stat(path), (stat) => {
            return stat.size;
        });
    }
    /**
     * Retrieve the time when `file` was last modified.
     *
     * @param {String} file
     *
     * @returns {Date}
     */
    static async lastModified(file) {
        return goodies_1.upon(await this.stat(file), (stat) => {
            return stat.mtime;
        });
    }
    /**
     * Retrieve the time when `file` was last accessed.
     *
     * @param {String} file
     *
     * @returns {Date}
     */
    static async lastAccessed(file) {
        return goodies_1.upon(await this.stat(file), (stat) => {
            return stat.atime;
        });
    }
    /**
     * Change the file system timestamps of the
     * referenced `path`. Updates the last
     * accessed and last modified properties.
     *
     * @param {String} path
     * @param {Number} lastAccessed
     * @param {Number} lastModified
     *
     * @throws
     */
    static async updateTimestamps(path, lastAccessed, lastModified) {
        if (!helper_1.isDate(lastAccessed)) {
            throw new Error(`Updating the last accessed timestamp for ${path} requires an instance of "Date". Received ${typeof lastAccessed}`);
        }
        if (!helper_1.isDate(lastModified)) {
            throw new Error(`Updating the last modified timestamp for ${path} requires an instance of "Date". Received ${typeof lastAccessed}`);
        }
        await fs_extra_1.default.utimes(path, lastAccessed, lastModified);
    }
    /**
     * Test the user's permissions for the given `path` which can
     * be a file or directory. The `mode` argument is an optional
     * integer to specify the accessibility level.
     *
     * @param {String} path  - file or directory path
     * @param {Integer} mode - defaults to `fs.constants.F_OK`
     *
     * @returns {Boolean}
     *
     * @throws
     */
    static async canAccess(path, mode = fs_extra_1.default.constants.F_OK) {
        try {
            await fs_extra_1.default.access(path, mode);
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    /**
     * Determines whether the given `path` exists on the file system.
     *
     * @param {String} path
     *
     * @returns {Boolean}
     */
    static async pathExists(path) {
        return await fs_extra_1.default.pathExists(path);
    }
    /**
     * Shortcut for `pathExists` to check whether a given file
     * or directory exists on the file system.
     *
     * @param {String} path
     *
     * @returns {Boolean}
     */
    static async exists(path) {
        return await this.pathExists(path);
    }
    /**
     * Determines wether the given `path` does not exists.
     *
     * @param {String} path
     *
     * @returns {Boolean}
     */
    static async notExists(path) {
        return !await this.exists(path);
    }
    /**
     * Updates the access and modification times of the given `file` current
     * time. This method creates the `file` if it doesnâ€™t exist.
     *
     * @param {String} file
     */
    static async touch(file) {
        await this.ensureFile(file);
        const now = new Date();
        await this.updateTimestamps(file, now, now);
    }
    /**
     * Ensure that the `file` exists. If the requested file and
     * directories do not exist, they are created. If the file
     * already exists, it is NOT modified.
     *
     * @param {String} file
     */
    static async ensureFile(file) {
        await fs_extra_1.default.ensureFile(file);
    }
    /**
     * Read the entire content of `file`. If no `encoding` is
     * specified, the raw buffer is returned. If `encoding` is
     * an object, it allows the `encoding` and `flag` options.
     *
     * @param {String} file
     * @param {String|Object} encoding
     *
     * @returns {String}
     */
    static async readFile(file, encoding = 'utf8') {
        return await fs_extra_1.default.readFile(file, encoding);
    }
    /**
     * Read the contents of a directory with the given `path`.
     * Returns an array of the names of the files in the
     * directory excluding `.` and `..`.
     *
     * @param {String} path
     *
     * @returns {Array}
     */
    static async files(path) {
        return await fs_extra_1.default.readdir(path);
    }
    /**
     * Read the contents of the directory at the given `path`
     * recursively. Returns an array of file names
     * excluding `.`, `..`, and dotfiles.
     *
     * @param {String} path
     * @param {Object} options config object - supports the `ignore` property: list of ignored files
     *
     * @returns {Array}
     */
    static async allFiles(path, options = {}) {
        const { ignore } = options;
        return recursive_readdir_1.default(path, ignore ? [].concat(ignore) : undefined);
    }
    /**
     * Write the given `content` to the file` and create
     * any parent directories if not existent.
     *
     * @param  {String} path
     * @param  {String} content
     * @param  {Object} options
     */
    static async writeFile(file, content, options) {
        return await fs_extra_1.default.outputFile(file, content, options);
    }
    /**
     * Removes a file or directory from the file system located at `path`.
     *
     * @param {String} path
     */
    static async remove(path) {
        return await fs_extra_1.default.remove(path);
    }
    /**
     * Removes a `file` from the file system.
     *
     * @param {String} file
     */
    static async removeFile(file) {
        return await this.remove(file);
    }
    /**
     * Copy a file or directory from `src` to `dest`. The
     * directory can have contents. Like `cp -r`. If
     * `src` is a directory this method copies everything
     * inside of `src`, not the entire directory itself.
     *
     * If `src` is a file, make sure that `dest` is a file
     * as well (and not a directory).
     *
     * @param {String} src  - source path
     * @param {String} dest - destination path
     * @param {Object} options
     */
    static async copy(src, dest, options) {
        return await fs_extra_1.default.copy(src, dest, options);
    }
    /**
     * Moves a file or directory from `src` to `dest`. By default,
     * this method doesn't override existingfiles. You can
     * override existing files using `{ override: true }`.
     *
     * @param {String} src  - source path
     * @param {String} dest - destination path
     * @param {Object} options
     */
    static async move(src, dest, options = {}) {
        return await fs_extra_1.default.move(src, dest, options);
    }
    /**
     * Ensures that the directory exists. If the directory
     * structure does not exist, it is created.
     * Like `mkdir -p`.
     *
     * @param {String} dir - directory path
     *
     * @returns {String} dir - directory path
     */
    static async ensureDir(dir) {
        return await goodies_1.tap(dir, async () => {
            await fs_extra_1.default.ensureDir(dir);
        });
    }
    /**
     * Removes a `dir` from the file system.The directory
     * can have content. Content in the directory will
     * be removed as well, like `rm -rf`.
     *
     * @param {String} dir - directory path
     */
    static async removeDir(dir) {
        return await fs_extra_1.default.remove(dir);
    }
    /**
     * Ensures that a directory is empty. Deletes directory
     * contents if the directory is not empty. If the
     * directory does not exist, it is created.
     * The directory itself is not deleted.
     *
     * @param {String} dir
     */
    static async emptyDir(dir) {
        return await fs_extra_1.default.emptyDir(dir);
    }
    /**
     * Changes the permissions of a `file`.
     * The `mode` is a numeric bitmask and
     * can be an integer or string.
     *
     * @param {String} file
     * @param {String|Integer} mode
     */
    static async chmod(file, mode) {
        return await fs_extra_1.default.chmod(file, parseInt(mode, 8));
    }
    /**
     * Ensures that the link from source to
     * destination exists. If the directory
     * structure does not exist, it is created.
     *
     * @param {String} src
     * @param {String} dest
     */
    static async ensureLink(src, dest) {
        return await fs_extra_1.default.ensureLink(src, dest);
    }
    /**
     * Ensures that the symlink from source to
     * destination exists. If the directory
     * structure does not exist, it is created.
     *
     * @param {String} src
     * @param {String} dest
     * @param {String} type
     */
    static async ensureSymlink(src, dest, type = 'file') {
        return await fs_extra_1.default.ensureSymlink(src, dest, type);
    }
    /**
     * Acquire a file lock on the specified `file` path with the given `options`.
     * If the `file` is already locked, this method won't throw an error and
     * instead just move on.
     *
     * @param {String} file
     * @param {Object} options
     *
     * @returns {Function} release function
     */
    static async lock(file, options) {
        if (await this.isNotLocked(file, options)) {
            await proper_lockfile_1.default.lock(file, options);
        }
    }
    /**
     * Release an existent lock for the `file` and given `options`. If the `file`
     * isn't locked, this method won't throw an error and just move on.
     *
     * @param {String} file
     */
    static async unlock(file, options) {
        if (await this.isLocked(file, options)) {
            await proper_lockfile_1.default.unlock(file, options);
        }
    }
    /**
     * Check if the `file` is locked and not stale.
     *
     * @param {String} file
     * @param {Object} options
     *
     * @returns {Boolean}
     */
    static async isLocked(file, options) {
        return await proper_lockfile_1.default.check(file, options);
    }
    /**
     * Check if the `file` is not locked and not stale.
     *
     * @param {String} file
     * @param {Object} options
     *
     * @returns {Boolean}
     */
    static async isNotLocked(file, options) {
        return !await this.isLocked(file, options);
    }
    /**
     * Create a random temporary file path you can write to.
     * The operating system will clean up the temporary
     * files automatically, probably after some days.
     *
     * @param {Object} options
     *
     * @returns {String}
     */
    static async tempFile(name) {
        const file = path_1.default.resolve(await this.tempDir(), name !== null && name !== void 0 ? name : helper_1.randomString());
        return await goodies_1.tap(file, async () => {
            await this.ensureFile(file);
        });
    }
    /**
     * Create a temporary directory path which will be cleaned up by the operating system.
     *
     * @returns {String}
     */
    static async tempDir() {
        return await this.ensureDir(await this.tempPath());
    }
    /**
     * Returns the path to the userâ€™s home directory. You may pass a `path` to which
     * the function should resolve in the userâ€™s home directory. This method does
     * **not** ensure that the resolved path exists. Please do that yourself.
     *
     * @param {String} path
     *
     * @returns {String}
     */
    static async homeDir(path) {
        return path
            ? path_1.default.resolve(os_1.default.homedir(), path)
            : os_1.default.homedir();
    }
    /**
     * Generates a random, temporary path on the filesystem.
     *
     * @returns {String}
     */
    static async tempPath() {
        return path_1.default.resolve(await this.realPath(os_1.default.tmpdir()), helper_1.randomString());
    }
    /**
     * Returns the fully resolve, absolute file path to the given `path`.
     * Resolves any relative paths, like `..` or `.`, and symbolic links.
     *
     * @param {String} path
     * @param {Object} cache
     *
     * @returns {String}
     */
    static async realPath(path, cache) {
        return await fs_extra_1.default.realpath(path, cache);
    }
    /**
     * Returns the extension of `file`. For example, returns `.html`
     * for the HTML file located at `/path/to/index.html`.
     *
     * @param {String} file
     *
     * @returns {String}
     */
    static async extension(file) {
        return path_1.default.extname(file);
    }
    /**
     * Returns the trailing name component from a file path. For example,
     * returns `file.png` from the path `/home/user/file.png`.
     *
     * @param {String} path
     * @param {String} extension
     *
     * @returns {String}
     */
    static async basename(path, extension) {
        return path_1.default.basename(path, extension);
    }
    /**
     * Returns the file name without extension.
     *
     * @param {String} file
     *
     * @returns {String}
     */
    static async filename(file) {
        return path_1.default.parse(file).name;
    }
    /**
     * Returns the directory name of the given `path`.
     * For example, a file path of `foo/bar/baz/file.txt`
     * returns `foo/bar/baz`.
     *
     * @param {String} path
     *
     * @returns {String}
     */
    static async dirname(path) {
        return path_1.default.dirname(path);
    }
    /**
     * Determines whether the given `path` is a file.
     *
     * @param {String} path
     *
     * @returns {Boolean}
     */
    static async isFile(path) {
        return goodies_1.upon(await this.stat(path), (stats) => {
            return stats.isFile();
        });
    }
    /**
     * Determines whether the given `path` is a directory.
     *
     * @param {String} path
     *
     * @returns {Boolean}
     */
    static async isDirectory(path) {
        return goodies_1.upon(await this.stat(path), (stats) => {
            return stats.isDirectory();
        });
    }
    /**
     * Append the given `content` to a `file`. This method
     * creates the `file` if it does not exist yet.
     *
     * @param {String|Buffer} file
     * @param {String|Buffer} content
     * @param {String|Object} options
     */
    static async append(file, content, options) {
        await fs_extra_1.default.appendFile(file, content, options);
    }
    /**
     * Rename a file located at `src` to the pathname defined by `dest`.
     * Both, `src` and `dest` must be file paths. If a file already
     * exists at the `dest` location, it will be overwritten.
     *
     * @param {String} src
     * @param {String} dest
     */
    static async rename(src, dest) {
        await fs_extra_1.default.rename(src, dest);
    }
}
exports.Filesystem = Filesystem;
